###############################################################################
#  Copyright (c) 2016 Clyde Stanfield
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to
#  deal in the Software without restriction, including without limitation the
#  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
#  sell copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
#  IN THE SOFTWARE.
###############################################################################

macro(ModList list prefix suffix outputName)
    set(output "")
    foreach(var ${list})
        list(APPEND output ${prefix}${var}${suffix})
    endforeach()
    set(${outputName} ${output})
endmacro()

macro(BuildInc includes outdir libname)
    foreach(INC ${includes})
        get_filename_component(INC_NAME ${INC} NAME)
        string(REPLACE . - INC_TARGET_SUFFIX ${INC_NAME})
        set(INC_TARGET_NAME ${libname}-${INC_TARGET_SUFFIX})
        add_custom_target(${INC_TARGET_NAME}
                   COMMAND ${CMAKE_COMMAND} -E copy_if_different
                       ${INC} ${outdir}/${INC_NAME})
        add_dependencies(${libname} ${INC_TARGET_NAME})
    endforeach()
endmacro()


macro(BuildData data libname subdir)
    get_filename_component(DATA_TYPE ${data} NAME)
    file(GLOB DATA_FILES ${data}/*)

    foreach(DATA_FILE ${DATA_FILES})
        get_filename_component(DATA_NAME ${DATA_FILE} NAME)
        string(REPLACE . - DATA_TARGET_NAME ${DATA_NAME})
        add_custom_target(${DATA_TARGET_NAME}
                   COMMAND ${CMAKE_COMMAND} -E copy_if_different
                       ${DATA_FILE} ${CMAKE_INSTALL_PREFIX}/${subdir}/${DATA_TYPE}/${DATA_NAME})
        add_dependencies(${libname} ${DATA_TARGET_NAME})

        if(IS_DIRECTORY ${DATA_FILE})
            BuildData(${DATA_FILE} ${DATA_TARGET_NAME} ${subdir}/${DATA_TYPE})
        endif()

    endforeach()
endmacro()

macro(GetDeps pathname)
    # Clear out MOD and TEST DEPS
    set(MOD_DEPS "")
    set(EXT_DEPS "")
    set(TEST_DEPS "")
    set(APP_DEPS "")

    if(EXISTS ${pathname}/CMakeLists.txt)
        add_subdirectory(${pathname})
    endif()

    ModList("${MOD_DEPS}" nyra- -test-cpp MOD_TEST_DEPS)
    ModList("${MOD_DEPS}" nyra- -cpp MOD_DEPS)
    ModList("${TEST_DEPS}" nyra- -cpp TEST_DEPS)
    ModList("${APP_DEPS}" nyra- -cpp APP_DEPS)
endmacro()

macro(BuildModule name libname deps pathname)

    # Get all the source files
    file(GLOB SOURCES ${pathname}/source/*.cpp)
    file(GLOB INCLUDES ${pathname}/include/*.h ${pathname}/include/*.hpp)
    file(GLOB DATA_DIRS ${pathname}/data/*)

        list(LENGTH SOURCES SOURCE_LENGTH)
        if (SOURCE_LENGTH EQUAL 0)
            add_library(${libname} INTERFACE)
            target_sources(${libname} INTERFACE ${INCLUDES})
            target_link_libraries(${libname} INTERFACE ${deps} ${MOD_DEPS} ${EXT_DEPS})
        else()
            add_library(${libname} ${SOURCES} ${INCLUDES})
            target_link_libraries(${libname} ${deps} ${MOD_DEPS} ${EXT_DEPS})
        endif()

        # Copy the headers
        string(REPLACE . / INC_DIR ${name})
        BuildInc("${INCLUDES}" ${CMAKE_INCLUDE_OUTPUT_DIRECTORY}/nyra/${INC_DIR} ${libname})
        foreach(DATA_DIR ${DATA_DIRS})
            BuildData(${DATA_DIR} ${libname} data)
        endforeach()
endmacro()

macro(BuildTests libname testlibname pathname outdir)
    # Build the unittests
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${outdir})
    if (IS_DIRECTORY ${pathname})
        file(GLOB TESTS ${pathname}/*.cpp)
            foreach (TEST ${TESTS})
                get_filename_component(TEST_NAME ${TEST} NAME_WE)
                add_executable(${TEST_NAME} ${TEST})
                target_link_libraries(${TEST_NAME}
                                      ${libname}
                                      ${testlibname}
                                      ${GoogleTest}
                                      nyra-core-test-cpp
                                      ${MOD_DEPS}
                                      ${MOD_TEST_DEPS}
                                      ${EXT_DEPS}
                                      ${TEST_DEPS}
                                      ${CMAKE_THREAD_LIBS_INIT})
                add_test(run_${TEST_NAME} ${outdir}/${TEST_NAME})
            endforeach()
        endif()
endmacro()

macro(BuildApps libname pathname outdir)
    # Build the unittests
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${outdir})
    if (IS_DIRECTORY ${pathname})
        file(GLOB TESTS ${pathname}/*.cpp)
            foreach (TEST ${TESTS})
                get_filename_component(TEST_NAME ${TEST} NAME_WE)
                add_executable(${TEST_NAME} ${TEST})
                target_link_libraries(${TEST_NAME}
                                      ${libname}
                                      ${MOD_DEPS}
                                      ${APP_DEPS}
                                      ${EXT_DEPS}
                                      ${CMAKE_THREAD_LIBS_INIT})
            endforeach()
        endif()
endmacro()
